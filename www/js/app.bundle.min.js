(function () {
  'use strict';
  angular.module('category-add.controllers', [])
    .controller('categoryAddCtrl', ['$scope', '$state', 'CategoryService', '$ionicHistory', '$ionicActionSheet', '$stateParams', function ($scope, $state, CategoryService, $ionicHistory, $ionicActionSheet, $stateParams) {
      $scope.$on('$ionicView.beforeEnter', function () {
        $scope.addCategory = $stateParams.id == '0';
        $scope.category = CategoryService.getCategoryById($stateParams.id) || { name: '' };
        $scope.sections = [{ name: '' }]
      })
      $scope.addSection = function () {
        var emptyLines = $scope.sections.filter(function (v) {
          return !v.name;
        })
        if (!emptyLines.length) $scope.sections.push({ name: '' });
      }
      $scope.removeSection = function (index) {
        $scope.sections.splice(index, 1);
      }
      $scope.saveCategory = function () {
        var emptyLines = $scope.sections.filter(function (v) {
          return !v.name;
        });
        if ((!$scope.category.id && $scope.category.name) || ($scope.category.id && !emptyLines.length)) {
          if ($scope.category.id) {
            CategoryService.createSubCategory($scope.category.id, angular.copy($scope.sections));
            $state.go('app.category', {
              activeId: $scope.category.id
            }, { location: 'replace' });
          } else {
            $scope.category.children = $scope.sections;
            var newId = CategoryService.addCategory(angular.copy($scope.category));
            $state.go('app.category', {
              activeId: newId
            }, { location: 'replace' });
          }
        }

      }
    }]);
})();

(function () {
  'use strict';
  angular.module('category-edit.controllers', [])
    .controller('categoryEditCtrl', ['$scope', '$state', 'CategoryService', '$ionicHistory', '$ionicPopup', '$stateParams', function ($scope, $state, CategoryService, $ionicHistory, $ionicPopup, $stateParams) {
      $scope.category = CategoryService.getCategoryById($stateParams.id);
      $scope.sections = $scope.category.children || [];
      $scope.addSection = function () {
        var emptyLines = $scope.sections.filter(function (v) {
          return !v.name;
        })
        if (!emptyLines.length) $scope.sections.push({ name: '' });
      }
      $scope.removeCategory = function () {
        $ionicPopup.confirm({
          title: '您确认要删除吗？',
          template: '请先删除该类别下的所有商品记录',
          cancelText: '取消',
          okText: '确认'
        }).then(function (res) {
          CategoryService.deleteCategory($scope.category.id);
          $state.go('app.category', {
            activeId: $scope.category.id
          }, { location: 'replace' });
        })
      }
      $scope.removeSection = function (index) {
        $ionicPopup.confirm({
          title: '您确认要删除吗？',
          template: '请先删除该类别下的所有商品记录',
          cancelText: '取消',
          okText: '确认'
        }).then(function (res) {
          $scope.sections.splice(index, 1);
        })
      }
      $scope.saveCategory = function () {
        var emptyLines = $scope.sections.filter(function (v) {
          return !v.name;
        });
        if ($scope.category.name && !emptyLines.length) {
          $scope.category.children = $scope.sections;
          CategoryService.updateCategory($scope.category.id, $scope.category);
          $state.go('app.category', {
            activeId: $scope.category.id
          }, { location: 'replace' });
        }
      }
    }]);
})();

(function () {
  'use strict';
  angular.module('category.controllers', ['category-add.controllers', 'category-edit.controllers'])
    .controller('categoryCtrl', ['$scope', '$state', 'CategoryService', '$ionicHistory', '$ionicActionSheet', '$stateParams', function ($scope, $state, CategoryService, $ionicHistory, $ionicActionSheet, $stateParams) {
      var activeId = $stateParams.activeId || 0;
      $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
        if (fromState.name === 'app.home') {
          $scope.showInfo = '无小分类进入大分类';
        }
        if (fromState.name === 'app.product') {
          $scope.showInfo = '全部商品';
        }
        if (fromState.name !== 'app.category') {
          $scope.categories = CategoryService.getAll(true);
          if (activeId) {
            var find = false;
            $scope.categories.forEach(function (v) {
              if (v.id == activeId) {
                $scope.activeCategory = v;
                $scope.sections = v.children;
                find = true;
                if ($scope.sections && $scope.sections[0].id != 0) {
                  $scope.sections.unshift({ id: 0, name: $scope.showInfo || '无小分类进入大分类' });
                }
              }
            })
            if (!find) {
              $scope.activeCategory = $scope.categories[0];
              $scope.sections = $scope.categories[0].children;
              if ($scope.sections && $scope.sections[0].id != 0) {
                $scope.sections.unshift({ id: 0, name: $scope.showInfo || '无小分类进入大分类' });
              }
            }
          } else {
            $scope.activeCategory = $scope.categories[0];
            $scope.sections = $scope.categories[0].children;
            if ($scope.sections && $scope.sections[0].id != 0) {
              $scope.sections.unshift({ id: 0, name: $scope.showInfo || '无小分类进入大分类' });
            }
          }
        }
      });
      $scope.selectCategory = function (id) {
        if ($scope.activeCategory.id != id) {
          angular.forEach($scope.categories, function (data, index) {
            if (data.id == id) {
              $scope.activeCategory = data;
              $scope.sections = data.children;
              if ($scope.sections && $scope.sections[0].id != 0) {
                $scope.sections.unshift({ id: 0, name: $scope.showInfo || '无小分类进入大分类' });
              }
            }
          })
        }
      }
      $scope.selectSection = function (item) {
        $scope.activeSection = {
          id: $scope.activeCategory.id,
          name: $scope.activeCategory.name,
          section: {
            id: item.id,
            name: item.id ? item.name : ''
          }
        };
        $ionicHistory.goBack();
      }
      $scope.$watch('activeSection', function (newValue, oldValue) {
        if (newValue) CategoryService.updateActiveCategory(newValue);
      })
      $scope.showActionSheet = function () {
        $ionicActionSheet.show({
          buttons: [{ 'text': '新增小分类' }, { 'text': '编辑分类' }],
          cancelText: '<b>取消</b>',
          buttonClicked: function (index) {
            switch (index) {
              case 0:
                $state.go('app.categoryAdd', { id: $scope.activeCategory.id })
                break;
              case 1:
                $state.go('app.categoryEdit', { id: $scope.activeCategory.id })
                break;
            }
          }
        })
      }
    }]);
})();

(function () {
  'use strict';
  angular.module('category.service', [])
    .factory('CategoryService', ['$rootScope', 'LocalStorageService', function ($rootScope, LocalStorageService) {
      var service = {}, key = 'CATEGORY', defaultCategories = [
        { 'id': 1, 'name': '电脑整机', 'parent_id': 0 },
        { 'id': 2, 'name': '电脑配件', 'parent_id': 0 },
        { 'id': 3, 'name': '外设产品', 'parent_id': 0 },
        { 'id': 4, 'name': '网络产品', 'parent_id': 0 },
        { 'id': 5, 'name': '笔记本', 'parent_id': 1 },
        { 'id': 6, 'name': '台式机', 'parent_id': 1 },
        { 'id': 7, 'name': '平板电脑', 'parent_id': 1 },
        { 'id': 8, 'name': 'CPU', 'parent_id': 2 },
        { 'id': 9, 'name': '内存', 'parent_id': 2 },
        { 'id': 10, 'name': '鼠标', 'parent_id': 3 },
        { 'id': 11, 'name': '键盘', 'parent_id': 3 },
        { 'id': 12, 'name': 'U盘', 'parent_id': 3 },
        { 'id': 13, 'name': '路由器', 'parent_id': 4 },
        { 'id': 14, 'name': '交换机', 'parent_id': 4 },
        { 'id': 15, 'name': '网卡', 'parent_id': 4 },
        { 'id': 16, 'name': '网络配件', 'parent_id': 4 }
      ];

      service.activeCategory = {};
      service.updateActiveCategory = function (val) {
        this.activeCategory = angular.copy(val);
        $rootScope.$broadcast('ActiveCategoryUpdate');
      }

      service.init = function () {
        this.originData = LocalStorageService.get(key);
        if (!this.originData) {
          LocalStorageService.update(key, defaultCategories);
          this.originData = defaultCategories;
        }
        this.refresh();
      }
      service.refresh = function () {
        this.dataMap = {};
        this.originData.forEach(function (v) {
          if (!v.parent_id) {
            var obj = angular.copy(v);
            obj.children = [], this.dataMap[obj.id] = obj;
          }
        }.bind(this));
        this.originData.forEach(function (d) {
          if (d.parent_id) {
            var obj = angular.copy(d);
            this.dataMap[d.parent_id].children.push(obj);
          }
        }.bind(this));
        this.nowId = this.originData.length ? Math.max.apply(null, this.originData.map(function (v) {
          return v.id;
        })) : 0;
      }

      service.getAll = function (isTree) {
        if (isTree) {
          return Object.keys(this.dataMap).map(function (v) {
            return angular.copy(this.dataMap[v]);
          }.bind(this))
        }
        return this.originData;
      }
      service.getCategoryById = function (id) {
        return angular.copy(this.dataMap[id]);
      }
      service.getSubCategoryByCategoryId = function (cid) {
        return this.dataMap[id] && angular.copy(this.dataMap[id].children);
      }

      service.addCategory = function (data) {
        var subCategory = data.children || [];
        delete data.children;
        var cid = this.createCategory(data);
        if (subCategory.length) {
          this.createSubCategory(cid, subCategory);
        }
        return cid;
      }
      service.createCategory = function (data) {
        data.id = this.nowId + 1;
        data.parent_id = 0;
        this.originData.push(data);
        LocalStorageService.update(key, this.originData);
        this.refresh();
        return data.id;
      }

      service.createSubCategory = function (cid, data) {
        data = data.map(function (v, i) {
          v.id = this.nowId + i + 1;
          v.parent_id = cid;
          return v;
        }.bind(this))
        this.originData = this.originData.concat(data);
        LocalStorageService.update(key, this.originData);
        this.refresh();
        return true;
      }
      service.deleteCategory = function (id) {
        this.originData = this.originData.filter(function (v) {
          return v.parent_id != id && v.id != id;
        });
        LocalStorageService.update(key, this.originData);
        this.refresh();
        return true;
      }
      service.deleteSubCategoryByCategoryId = function (cid) {
        this.originData = this.originData.filter(function (v) {
          return v.parent_id != cid;
        });
        LocalStorageService.update(key, this.originData);
        this.refresh();
        return true;
      }
      service.updateCategory = function (id, data) {
        this.originData.forEach(function (v) {
          if (v.id == id) v.name = data.name;
        })
        if (data.children.length) {
          this.updateSubCategory(id, data.children)
        }
        this.refresh();
        return this.getCategoryById(id);
      }
      service.updateSubCategory = function (cid, data) {
        this.deleteSubCategoryByCategoryId(cid);
        this.createSubCategory(cid, data);
        return true;
      }
      service.init();
      return service;
    }]);
})();

(function () {
  'use strict';
  angular.module('about.controllers', [])
    .controller('AboutCtrl', ['$scope', '$state', '$ionicPopup', 'LocalStorageService', '$ionicHistory', function ($scope, $state, $ionicPopup, LocalStorageService, $ionicHistory) {

    }])
})();

(function () {
  'use strict';
  angular.module('home.controllers', [])
    .controller('HomeCtrl', ['$scope', '$state', 'UserService', function ($scope, $state, UserService) {
      $scope.$on('$ionicView.beforeEnter', function (event, data) {
        var isLogin = UserService.getIsLogin();
        if (!isLogin) $state.go('login');
      })
    }]);
})();

(function () {
  'use strict';
})();

(function () {
  'use strict';
})();

(function () {
  'use strict';
  angular.module('login.controllers', [])
    .controller('LoginCtrl', ['$scope', '$state', '$ionicPopup', 'UserService', function ($scope, $state, $ionicPopup, UserService) {
      var userData = UserService.getUserData();
      $scope.loginData = UserService.getRememberUser();
      $scope.login = function () {
        if ($scope.loginData.username == userData.username && $scope.loginData.password == userData.password) {
          UserService.updateRememberUser($scope.loginData);
          UserService.updateIsLogin(true);
          $state.go('app.home', {}, { location: 'replace' })
        } else {
          $ionicPopup.alert({
            title: '警告',
            template: '您的用户名或者密码错误',
            okText: '确定',
            okType: 'button-energized'
          })
        }
      }
    }])
})();

(function () {
  'use strict';
  angular.module('menu.controllers', [])
    .controller('AppCtrl', ['$scope', '$ionicModal', '$timeout', function ($scope, $ionicModal, $timeout) {
      // With the new view caching in Ionic, Controllers are only called
      // when they are recreated or on app start, instead of every page change.
      // To listen for when this page is active (for example, to refresh data),
      // listen for the $ionicView.enter event:
      //$scope.$on('$ionicView.enter', function(e) {
      //});

      // Form data for the login modal
      $scope.loginData = {};
      $scope.shopData = {
        name: '黄加樑',
        phone: '18305961659'
      }

    }])
})();

(function () {
  'use strict';
  angular.module('prodcut-add.controllers', [])
    .controller('ProductAddCtrl', ['$scope', '$state', '$ionicPopup', '$ionicActionSheet', 'ProductService', 'CategoryService', '$ionicHistory', '$stateParams', '$cordovaBarcodeScanner', '$cordovaCamera', '$cordovaImagePicker', function ($scope, $state, $ionicPopup, $ionicActionSheet, ProductService, CategoryService, $ionicHistory, $stateParams, $cordovaBarcodeScanner, $cordovaCamera, $cordovaImagePicker) {
      var emptyProduct = {
        images: [],
        barcode: '',
        category: {
          id: 0,
          name: '默认分类',
          section: {
            id: 0,
            name: ''
          }
        },
        name: '',
        price: '',
        cost: '',
        stock: '',
        size: '',
        remark: '',
        supplier: {
          name: '',
          phone: ''
        }
      }, emptySupplier = {
        name: '',
        phone: ''
      }
      $scope.product = angular.copy(emptyProduct);
      $scope.supplier = angular.copy(emptySupplier);

      $scope.$on('ActiveCategoryUpdate', function () {
        $scope.product.category = CategoryService.activeCategory;
      })
      $scope.scanBarcode = function () {
        $cordovaBarcodeScanner.scan().then(function (barcodeData) {
          $scope.product.barcode = barcodeData.text;
          alert(barcodeData.text);
        }, function (err) {
          alert(err);
        })
      }
      function camera() {
        var options = {
          quality: 50,
          destinationType: Camera.DestinationType.FILE_URI,
          sourceType: Camera.PictureSourceType.CAMERA,
          allowEdit: true,
          encodingType: Camera.EncodingType.JPEG,
          targetWidth: 100,
          targetHeight: 100,
          correctOrientation: true,
          saveToPhotoAlbum: false,
          popoverOptions: CameraPopoverOptions,
        }
        $cordovaCamera.getPicture(options).then(function (imageData) {
          $scope.product.images.push(imageData);
        }, function (err) {
          alert(err);
        })
      }
      function pickImage() {
        var options = {
          maximumImagesCount: 3,
          width: 0,
          height: 0,
          quality: 80
        }
        $cordovaImagePicker.getPictures(options).then(function (results) {
          for (var i = 0; i < results.length; i++) {
            $scope.product.images.push(results[i]);
          }
        }, function (err) {
          alert(err);
        })
      }
      $scope.showActionSheet = function () {
        $ionicActionSheet.show({
          buttons: [{ 'text': '拍照' }, { 'text': '从相册中选取' }],
          cancelText: '<b>取消</b>',
          buttonClicked: function (index) {
            switch (index) {
              case 0:
                camera();
                break;
              case 1:
                pickImage();
                break;
            }
          }
        })
      }
      $scope.selectSupplier = function () {
        $ionicPopup.show({
          title: '新增供应商',
          templateUrl: 'views/supplier/supplier.html',
          scope: $scope,
          buttons: [{
            text: '取消',
            type: 'button-energized button-outline',
            onTap: function (e) {
              $scope.supplier = angular.copy(emptySupplier);
            }
          }, {
            text: '确定',
            type: 'button-energized',
            onTap: function (e) {
              $scope.product.supplier = angular.copy($scope.supplier);
              $scope.supplier = angular.copy(emptySupplier);
            }
          }]
        }).then(function (res) {
        })
      }
      function saveProduct(callback) {
        $ionicPopup.confirm({
          title: '您确认要新增商品吗？',
          cancelText: '取消',
          okText: '确认'
        }).then(function () {
          ProductService.createProduct($scope.product);
          callback();
        })
      }
      $scope.save = function () {
        saveProduct(function (res) {
          $ionicHistory.goBack();
        }.bind(this));
      }
      $scope.saveAndNew = function () {
        saveProduct(function (res) {
          $scope.product = angular.copy(emptyProduct);
          $scope.supplier = angular.copy(emptySupplier);
          $state.reload();
        }.bind(this));
      }
    }])
})();

(function () {
  'use strict';
  angular.module('product.controllers', ['prodcut-add.controllers'])
    .controller('ProductCtrl', ['$scope', '$state', '$ionicPopup', 'ProductService', '$ionicHistory', '$ionicLoading', '$timeout', function ($scope, $state, $ionicPopup, ProductService, $ionicHistory, $ionicLoading, $timeout) {
      $scope.$on('$ionicView.beforeEnter', function (event, data) {
        $scope.isReady = false;
        // $scope.loadingMore = false;
        $scope.show();
        $scope.page = 0;
        $scope.size = 10;
        $scope.products = [];
        $scope.doRefresh();
        $scope.isReady = true;
        $timeout(function () {
          $ionicLoading.hide();
          $scope.loadingMore = true;
        }, 1000);
        $scope.model.name = '';
      });
      $scope.doRefresh = function () {
        $scope.page = 0;
        $scope.search(true);
        $timeout(function () {
          $scope.$broadcast('scroll.refreshComplete')
        }, 1000);
      }
      $scope.model = {};
      $scope.getByName = function () {
        $scope.page = 0;
        $scope.search(true);
      }
      $scope.loadMore = function () {
        $scope.loadingMore = false;
        $scope.page++;
        $scope.search();
        $timeout(function () {
          $scope.loadingMore = true
          $scope.$broadcast('scroll.infiniteScrollComplete');
        }, 1000);
      }
      $scope.search = function (refresh) {
        var data = ProductService.query($scope.page, $scope.size, $scope.model.name);
        console.log(data.items.length);
        $scope.products = !refresh ? ($scope.products || []).concat(data.items) : data.items;
        $scope.total = data.total;
      }
      $scope.show = function () {
        $ionicLoading.show({
          template: '<ion-spinner></ion-spinner>',
        });
      };
      $scope.hide = function () {
        $ionicLoading.hide();
      };
      $scope.moreDataCanBeLoaded = function () {
        return $scope.loadingMore && $scope.products.length < $scope.total;
      }
    }])
})();

(function () {
  'use strict';
  angular.module('product.service', [])
    .factory('ProductService', ['LocalStorageService', function (LocalStorageService) {
      var service = {}, key = 'PRODUCT', defaultProducts = [
        { id: 1, images: [], name: 'iphone7', price: '5388', stock: 12, barcode: '12121212112' },
        { id: 2, images: [], name: 'node7', price: '5388', stock: 120, barcode: '12121212112' },
        { id: 3, images: [], name: '小米5 plus', price: '1999', stock: 12, barcode: '12121212112' },
        { id: 4, images: [], name: 'iPhone7 plus', price: '6388', stock: 12, barcode: '12121212112' },
        { id: 5, images: [], name: '华为 P9', price: '3388', stock: 19, barcode: '12121212112' },
        { id: 6, images: [], name: '小米5', price: '1599', stock: 9, barcode: '12121212112' },
        { id: 7, images: [], name: 'iphone7p', price: '5388', stock: 12, barcode: '12121212112' },
        { id: 8, images: [], name: 'node71', price: '5388', stock: 120, barcode: '12121212112' },
        { id: 9, images: [], name: '小米5z plus', price: '1999', stock: 12, barcode: '12121212112' },
        { id: 10, images: [], name: 'iPhone7a plus', price: '6388', stock: 12, barcode: '12121212112' },
        { id: 11, images: [], name: '华为 P93', price: '3388', stock: 19, barcode: '12121212112' },
        { id: 12, images: [], name: '小米52', price: '1599', stock: 9, barcode: '12121212112' },
        { id: 13, images: [], name: 'iphone7', price: '5388', stock: 12, barcode: '12121212112' },
        { id: 14, images: [], name: 'node7', price: '5388', stock: 120, barcode: '12121212112' },
        { id: 15, images: [], name: '小米5 plus', price: '1999', stock: 12, barcode: '12121212112' },
        { id: 16, images: [], name: 'iPhone7 plus', price: '6388', stock: 12, barcode: '12121212112' },
        { id: 17, images: [], name: '华为 P9', price: '3388', stock: 19, barcode: '12121212112' },
        { id: 18, images: [], name: '小米5', price: '1599', stock: 9, barcode: '12121212112' },
        { id: 19, images: [], name: 'iphone7p', price: '5388', stock: 12, barcode: '12121212112' },
        { id: 20, images: [], name: 'node71', price: '5388', stock: 120, barcode: '12121212112' },
        { id: 21, images: [], name: '小米5z plus', price: '1999', stock: 12, barcode: '12121212112' },
        { id: 22, images: [], name: 'iPhone7a plus', price: '6388', stock: 12, barcode: '12121212112' },
        { id: 23, images: [], name: '华为 P93', price: '3388', stock: 19, barcode: '12121212112' },
        { id: 24, images: [], name: '小米52', price: '1599', stock: 9, barcode: '12121212112' },
      ];

      service.init = function () {
        this.originData = LocalStorageService.get(key);
        if (!this.originData) {
          LocalStorageService.update(key, defaultProducts);
          this.originData = defaultProducts;
        }
        this.originData = this.originData.sort(function (v1, v2) {
          return v2.id - v1.id;
        })
        this.refresh();
      }
      service.refresh = function () {
        LocalStorageService.update(key, this.originData);
        this.dataMap = {};
        this.originData.forEach(function (v) {
          this.dataMap[v.id] = v;
        }.bind(this))
        this.nowId = this.originData.length ? Math.max.apply(null, this.originData.map(function (v) {
          return v.id;
        })) : 0;
      }

      service.getAll = function () {
        return angular.copy(this.originData);
      }
      service.getProductById = function (id) {
        return angular.copy(this.dataMap[id]);
      }

      service.query = function (page, size, name) {
        var res = name ? this.originData.filter(function (v) {
          return ~v.name.indexOf(name);
        }) : angular.copy(this.originData);
        return { items: angular.copy(res).splice(page * size, size), total: res.length };
      }

      service.createProduct = function (data) {
        data.id = this.nowId + 1;
        this.originData.push(angular.copy(data));
        this.refresh();
        return data.id;
      }


      service.deleteProduct = function (id) {
        this.originData = this.originData.filter(function (v) {
          return v.id != id;
        });
        this.refresh();
        return true;
      }

      service.updateProduct = function (id, data) {
        this.originData.forEach(function (v) {
          if (v.id == id) v.name = data.name;
        });
        this.refresh();
        return this.getProductById(id);
      }
      service.init();
      return service;
    }]);
})();

(function () {
  'use strict';
  angular.module('setting.controllers', [])
    .controller('SettingCtrl', ['$scope', '$state', '$ionicPopup', 'UserService', '$ionicHistory', function ($scope, $state, $ionicPopup, UserService, $ionicHistory) {
      $scope.goBack = function () {
        $ionicHistory.nextViewOptions({
          disableBack: true
        });
        $state.go('app.home');
      };
      $scope.exitApp = function () {
        UserService.updateIsLogin(false);
        $ionicHistory.nextViewOptions({
          historyRoot: true
        })
        $state.go('login', {}, { location: 'replace' });
      }
    }])
})();

(function () {
  'use strict';
  angular.module('shop-edit.controllers', [])
    .controller('ShopEditCtrl', ['$scope', '$state', '$ionicPopup', 'LocalStorageService', '$ionicHistory', '$stateParams', function ($scope, $state, $ionicPopup, LocalStorageService, $ionicHistory, $stateParams) {
      var key = "SHOP", defaultValue = {
        'title': '黄加樑的店',
        'alias': '小店',
        'registerTime': '2017-04-01 08:00:00',
        'phone': '18305961659',
        'email': 'hjl4347570@163.com',
        'shopOwner': '黄加樑',
        'shopPhone': '18305961659',
        'industryClassification': '软件服务行业',
      };
      $scope.shop = LocalStorageService.get(key, defaultValue);
      $scope.title = $stateParams.title;
      $scope.model = { inputValue: $scope.shop[$stateParams.key] }
      $scope.save = function () {
        $scope.shop[$stateParams.key] = $scope.model.inputValue;
        LocalStorageService.update(key, $scope.shop);
        $ionicHistory.goBack();
      }
    }])
})();

(function () {
  'use strict';
  angular.module('shop.controllers', ['shop-edit.controllers'])
    .controller('ShopCtrl', ['$scope', '$state', '$ionicPopup', 'LocalStorageService', '$ionicHistory', function ($scope, $state, $ionicPopup, LocalStorageService, $ionicHistory) {
      var key = "SHOP", defaultValue = {
        'title': '黄加樑的店',
        'alias': '小店',
        'registerTime': '2017-04-01 08:00:00',
        'phone': '18305961659',
        'email': 'hjl4347570@163.com',
        'shopOwner': '黄加樑',
        'shopPhone': '18305961659',
        'industryClassification': '软件服务行业',
      };
      $scope.$on('$stateChangeSuccess', function () {
        $scope.shop = LocalStorageService.get(key, defaultValue);
      })
    }])
})();

(function () {
  'use strict';
  angular.module('password.controllers', [])
    .controller('PasswordCtrl', ['$scope', '$state', '$ionicPopup', 'UserService', '$ionicHistory', function ($scope, $state, $ionicPopup, UserService, $ionicHistory) {
      var userData = null;
      $scope.$on('$ionicView.beforeEnter', function (event, data) {
        userData = UserService.getUserData();
      })
      $scope.model = {
        op: '',
        p: '',
        cp: ''
      };
      $scope.save = function () {
        if ($scope.model.op === userData.password) {
          if ($scope.model.p && ($scope.model.p === $scope.model.cp)) {
            userData.password = $scope.model.p;
            UserService.updateUserData(userData);
            $ionicHistory.nextViewOptions({
              historyRoot: true
            })
            $state.go('login', {}, {});
          } else {
            $ionicPopup.alert({
              title: '警告',
              template: '您两次输入的密码不一致',
              okText: '确定',
              okType: 'button-energized'
            })
          }
        } else {
          $ionicPopup.alert({
            title: '警告',
            template: '您输入的密码错误',
            okText: '确定',
            okType: 'button-energized'
          })
        }
      }
    }])
})();

(function () {
  'use strict';
  angular.module('user.controllers', ['password.controllers'])
    .controller('UserCtrl', ['$scope', '$state', '$ionicPopup', 'LocalStorageService', '$ionicHistory', function ($scope, $state, $ionicPopup, LocalStorageService, $ionicHistory) {
    }])
})();

(function () {
  'use strict';
  angular.module('user.service', [])
    .factory('UserService', ['LocalStorageService', function (LocalStorageService) {
      var service = {},
        USER_DATA_KEY = 'USER_DATA',
        RE_USER_KEY = 'USER_INFO',
        IS_LOGIN_KEY = 'IS_LOGIN',
        defaultUser = {
          username: 'admin',
          password: '123456'
        }, defaultIsLogin = {
          value: false
        };
      service.init = function () {
        this.userData = LocalStorageService.get(USER_DATA_KEY);
        this.isLogin = LocalStorageService.get(IS_LOGIN_KEY);
        if (!this.userData) {
          LocalStorageService.add(USER_DATA_KEY, defaultUser);
          this.userData = defaultUser;
        };
        if (!this.isLogin) {
          LocalStorageService.add(IS_LOGIN_KEY, defaultIsLogin);
          this.isLogin = defaultIsLogin;
        }
      }
      service.getUserData = function () {
        return this.userData;
      }
      service.updateUserData = function (user) {
        LocalStorageService.update(USER_DATA_KEY, user);
        this.updateIsLogin(false);
        this.userData = user;
        return true;
      }
      service.getRememberUser = function () {
        return LocalStorageService.get(RE_USER_KEY, {
          username: '',
          password: ''
        });
      }
      service.updateRememberUser = function (user) {
        LocalStorageService.update(RE_USER_KEY, user)
        return true;
      }

      service.getIsLogin = function () {
        return this.isLogin.value;
      }
      service.updateIsLogin = function (value) {
        LocalStorageService.update(IS_LOGIN_KEY, { value: value });
        this.isLogin.value = value;
        return true;
      }
      service.init();
      return service;
    }]);
})();

(function () {
  'use strict';
  angular.module('welcome.controllers', [])
    .controller('WelcomeCtrl', ['$scope', function ($scope) {

    }]);
})();

(function () {
  'use strict';
})();

(function () {
  'use strict';
})();
